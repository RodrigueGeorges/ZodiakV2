import { Handler } from '@netlify/functions';
import { createClient } from '@supabase/supabase-js';
import { calculateDailyTransits, generateGuidanceWithOpenAI } from './_guidanceUtils';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
);

const handler: Handler = async () => {
  const today = new Date().toISOString().slice(0, 10);

  // 1. R√©cup√©rer les profils √©ligibles
  const { data: profiles, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('daily_guidance_sms_enabled', true)
    .in('subscription_status', ['active', 'trial']);

  if (error) {
    console.error('‚ùå Erreur r√©cup√©ration profils:', error.message);
    return { statusCode: 500, body: error.message };
  }

  console.log(`üìã Profils √©ligibles trouv√©s: ${profiles?.length || 0}`);

  for (const profile of profiles || []) {
    if (!profile.phone) {
      console.log(`‚è≠Ô∏è Profil ${profile.id} skipp√©: pas de t√©l√©phone.`);
      continue;
    }
    if (!profile.natal_chart) {
      console.log(`‚è≠Ô∏è Profil ${profile.id} skipp√©: pas de natal_chart.`);
      continue;
    }

    // V√©rifier si la guidance existe d√©j√†
    const { data: existing } = await supabase
      .from('daily_guidance')
      .select('id')
      .eq('user_id', profile.id)
      .eq('date', today)
      .maybeSingle();

    if (existing) {
      console.log(`‚è≠Ô∏è Profil ${profile.id} skipp√©: guidance d√©j√† existante pour ${today}.`);
      continue;
    }

    // G√©n√©rer la guidance
    try {
      console.log(`üöÄ G√©n√©ration guidance pour ${profile.id} (${profile.name})...`);
      const transits = await calculateDailyTransits(today);
      const guidance = await generateGuidanceWithOpenAI(profile.natal_chart, transits, today);

      const { error: upsertError } = await supabase.from('daily_guidance').upsert({
        user_id: profile.id,
        date: today,
        summary: guidance.summary,
        love: guidance.love,
        work: guidance.work,
        energy: guidance.energy,
        created_at: new Date().toISOString()
      });
      if (upsertError) {
        console.error(`‚ùå Erreur upsert guidance pour ${profile.id}:`, upsertError.message);
      } else {
        console.log(`‚úÖ Guidance g√©n√©r√©e et enregistr√©e pour ${profile.id}`);
      }
    } catch (e) {
      console.error(`‚ùå Erreur g√©n√©ration guidance pour ${profile.id}:`, e);
    }
  }

  return { statusCode: 200, body: 'G√©n√©ration termin√©e.' };
};

export { handler }; 