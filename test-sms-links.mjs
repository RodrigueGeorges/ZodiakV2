// Test script pour v√©rifier la g√©n√©ration des liens SMS
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL || 'https://your-project.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key'
);

// Fonction utilitaire pour g√©n√©rer un code court
function generateShortCode(length = 6) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Fonction utilitaire pour g√©n√©rer un UUID
function randomUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

async function testSmsLinkGeneration() {
  console.log('üß™ Test de g√©n√©ration de liens SMS...');
  
  try {
    // 1. R√©cup√©rer un utilisateur de test
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('id, name, phone')
      .eq('daily_guidance_sms_enabled', true)
      .limit(1);
    
    if (error || !profiles || profiles.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© pour le test');
      return;
    }
    
    const testUser = profiles[0];
    console.log(`‚úÖ Utilisateur de test trouv√©: ${testUser.name} (${testUser.id})`);
    
    // 2. G√©n√©rer un lien court
    const shortCode = generateShortCode();
    const token = randomUUID();
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    const today = new Date().toISOString().slice(0, 10);
    
    console.log(`üìù G√©n√©ration du lien court: ${shortCode}`);
    
    // 3. Sauvegarder le token
    const { error: tokenError } = await supabase
      .from('guidance_token')
      .upsert({
        user_id: testUser.id,
        token,
        date: today,
        expires_at: expiresAt,
        short_code: shortCode
      });
    
    if (tokenError) {
      console.log('‚ùå Erreur lors de la sauvegarde du token:', tokenError);
      return;
    }
    
    // 4. Cr√©er l'entr√©e de tracking
    const { error: trackingError } = await supabase
      .from('sms_tracking')
      .insert({
        user_id: testUser.id,
        short_code: shortCode,
        token: token,
        date: today,
        sent_at: new Date().toISOString()
      });
    
    if (trackingError) {
      console.log('‚ùå Erreur lors de la cr√©ation du tracking:', trackingError);
      return;
    }
    
    // 5. G√©n√©rer le lien final
    const appUrl = process.env.URL || 'https://zodiak.netlify.app';
    const shortLink = `${appUrl}/g/${shortCode}`;
    
    console.log('‚úÖ Lien g√©n√©r√© avec succ√®s!');
    console.log(`üîó Lien court: ${shortLink}`);
    console.log(`üîë Token: ${token}`);
    console.log(`üìÖ Expire le: ${expiresAt}`);
    
    // 6. Simuler le contenu du SMS
    const smsContent = `‚ú® Bonjour ${testUser.name?.split(' ')[0] || 'cher utilisateur'} !\n\nD√©couvre ta guidance du jour ! üåü\nLes astres ont un message sp√©cial pour toi üëá\n${shortLink}\n(Valable 24h)`;
    
    console.log('\nüì± Contenu du SMS:');
    console.log('‚îÄ'.repeat(50));
    console.log(smsContent);
    console.log('‚îÄ'.repeat(50));
    
    // 7. V√©rifier que le lien est accessible
    console.log('\nüîç V√©rification de l\'accessibilit√© du lien...');
    try {
      const response = await fetch(shortLink);
      if (response.ok) {
        console.log('‚úÖ Le lien est accessible');
      } else {
        console.log(`‚ö†Ô∏è Le lien retourne un statut ${response.status}`);
      }
    } catch (fetchError) {
      console.log('‚ö†Ô∏è Erreur lors de la v√©rification du lien:', fetchError.message);
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testSmsLinkGeneration(); 