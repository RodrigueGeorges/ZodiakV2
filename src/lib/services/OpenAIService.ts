import { ApiErrorHandler, type ApiResponse } from '../errors/ApiErrorHandler';
import { ApiCache } from '../cache/CacheManager';
import { ApiMonitor } from '../monitoring/ApiMonitor';
import type { NatalChart } from '../astrology';
import { detectGender } from '../utils';

class OpenAIService {
  private static readonly config = {
    maxTokens: 1000
  };

  private static readonly DEFAULT_GUIDANCE = {
    summary: "Les aspects plan√©taires du jour vous invitent √† l'action r√©fl√©chie. Restez √† l'√©coute de votre intuition tout en avan√ßant avec d√©termination vers vos objectifs.",
    love: "V√©nus forme des aspects harmonieux qui favorisent les √©changes authentiques. C'est le moment d'exprimer vos sentiments avec sinc√©rit√© et d'ouvrir votre coeur √† de nouvelles connexions.",
    work: "Mercure soutient vos projets professionnels. Votre clart√© d'esprit est un atout majeur aujourd'hui. Profitez de cette √©nergie pour communiquer vos id√©es et prendre des initiatives constructives.",
    energy: "L'alignement des plan√®tes vous apporte une belle vitalit√©. C'est une excellente journ√©e pour d√©marrer de nouvelles activit√©s physiques ou pour vous consacrer √† des projets qui vous passionnent et rechargent vos batteries."
  };

  private static async callOpenAI(prompt: string): Promise<string> {
    try {
      const response = await fetch('/.netlify/functions/openai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt, maxTokens: this.config.maxTokens, temperature: 0.7 }),
      });
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Erreur lors de l\'appel √† la fonction OpenAI:', errorText);
        return JSON.stringify(this.DEFAULT_GUIDANCE);
      }
      const data = await response.json();
      if (data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content) {
        return data.choices[0].message.content;
      }
      console.error('R√©ponse inattendue de la fonction OpenAI:', data);
      return JSON.stringify(this.DEFAULT_GUIDANCE);
    } catch (err) {
      console.error('Exception lors de l\'appel √† la fonction OpenAI:', err);
      return JSON.stringify(this.DEFAULT_GUIDANCE);
    }
  }

  static async generateGuidance(natalChart: NatalChart, transits: Record<string, unknown>, userId?: string): Promise<ApiResponse<typeof this.DEFAULT_GUIDANCE>> {
    try {
      // const cacheKey = `guidance_${JSON.stringify(natalChart)}_${JSON.stringify(transits)}`; // supprim√© car non utilis√©
      // Utiliser le cache centralis√©
      const guidance = await ApiCache.getCachedApiResponse(
        'openai-guidance',
        { natalChart, transits, userId },
        async () => {
          const prompt = this.buildPrompt(natalChart, transits);
          const response = await this.callOpenAI(prompt);
          
          try {
            return JSON.parse(response);
          } catch (error) {
            console.error('Error parsing OpenAI response:', error);
            return this.DEFAULT_GUIDANCE;
          }
        },
        24 * 60 * 60 * 1000 // Cache 24h
      );

      return ApiErrorHandler.createSuccessResponse(guidance);
    } catch (error) {
      console.error('Error generating guidance:', error);
      return ApiErrorHandler.handleApiError(error);
    }
  }

  private static buildPrompt(natalChart: NatalChart, transits: Record<string, unknown>): string {
    return `
      Analyse les positions plan√©taires suivantes et g√©n√®re une guidance quotidienne au format JSON.
      - summary: un r√©sum√© g√©n√©ral de 2-3 phrases de l'√©nergie du jour.
      - love: un paragraphe de 3-4 phrases sur les opportunit√©s et d√©fis dans la vie amoureuse.
      - work: un paragraphe de 3-4 phrases sur les dynamiques professionnelles et financi√®res.
      - energy: un paragraphe de 3-4 phrases sur la vitalit√©, le bien-√™tre et les activit√©s conseill√©es.
      
      IMPORTANT: Dans chaque champ, mets les mots-cl√©s les plus importants entre ast√©risques. Par exemple: "Aujourd'hui, la *communication* sera essentielle. Faites preuve de *prudence*."
      Le ton doit √™tre encourageant, clair et personnalis√© pour la personne recevant la guidance.

      Th√®me natal:
      ${JSON.stringify(natalChart, null, 2)}

      Transits du jour:
      ${JSON.stringify(transits, null, 2)}

      Format de r√©ponse attendu (uniquement du JSON valide):
      {
        "summary": "r√©sum√© g√©n√©ral...",
        "love": "conseils amour...",
        "work": "conseils travail...",
        "energy": "conseils √©nergie..."
      }
    `;
  }

  private static buildNatalChartInterpretationPrompt(natalChart: NatalChart, firstName?: string): string {
    let intro = 'Cher(e) ami(e)';
    if (firstName) {
      const gender = detectGender(firstName);
      if (gender === 'female') {
        intro = `Ch√®re ${firstName}`;
      } else if (gender === 'male') {
        intro = `Cher ${firstName}`;
      } else {
        intro = `Cher(e) ${firstName}`;
      }
    }
    return `
      Tu es un astrologue exp√©riment√© et bienveillant. En te basant sur le th√®me natal suivant, r√©dige une interpr√©tation astrologique compl√®te, riche et personnalis√©e en plusieurs paragraphes. Adresse-toi directement √† la personne en commen√ßant par "${intro},".

      Le texte doit √™tre structur√©, facile √† lire et couvrir les points suivants :
      1.  **Introduction** : Une br√®ve pr√©sentation de la "signature astrale" (Soleil, Lune, Ascendant) et ce qu'elle r√©v√®le de la personnalit√© centrale.
      2.  **Forces et Talents** : Analyse des positions plan√©taires (notamment le Soleil, Mercure, V√©nus, Mars) pour mettre en lumi√®re les forces, les talents naturels et les domaines o√π la personne peut briller.
      3.  **D√©fis et Axes de Croissance** : Identification des aspects plus complexes ou des positions (comme Saturne ou les n≈ìuds lunaires) qui repr√©sentent des d√©fis √† surmonter ou des le√ßons de vie importantes pour son d√©veloppement personnel.
      4.  **Conclusion** : Un paragraphe de conclusion encourageant qui r√©sume le potentiel global du th√®me et donne un conseil pour naviguer la vie en harmonie avec sa nature astrale.

      Utilise un ton chaleureux, inspirant et positif, m√™me en abordant les d√©fis. L'objectif est de fournir un aper√ßu puissant et utile qui aide la personne √† mieux se comprendre.

      Voici les donn√©es du th√®me natal :
      ${JSON.stringify(natalChart, null, 2)}

      R√©dige uniquement l'interpr√©tation textuelle, sans aucun autre formatage.
    `;
  }

  private static buildNatalSummaryPrompt(natalChart: NatalChart, firstName: string): string {
    return `
      Tu es un astrologue visionnaire et conteur. En te basant sur le th√®me natal suivant, √©cris une "Signature Astrale" immersive et po√©tique pour ${firstName}, structur√©e ainsi :

      1. Accroche cosmique : Commence par une phrase qui transporte ${firstName} dans l'univers, √©voquant la magie de sa naissance sous les √©toiles (1 phrase, style po√©tique, avec un emoji d'√©toile ou de galaxie).
      2. Portrait en 3 astres : Pour chaque √©l√©ment cl√©, √©cris une phrase personnalis√©e :
         - ‚òÄÔ∏è Soleil en {Soleil} : d√©cris l'√©nergie centrale, la force de caract√®re ou la mission de vie.
         - üåô Lune en {Lune} : d√©cris la sensibilit√©, le monde int√©rieur, la fa√ßon d'aimer ou de ressentir.
         - ‚ú® Ascendant en {Ascendant} : d√©cris la premi√®re impression, le style, la fa√ßon d'avancer dans la vie.
         (Chaque phrase commence par l'emoji correspondant, puis le nom du signe, puis la description.)
      3. Mantra astral : Termine par une citation ou un mantra inspirant, unique √† ce th√®me, √† m√©diter chaque jour (entour√© d'emojis, ex : "üåü Je rayonne ma lumi√®re unique üåü").

      Le ton doit √™tre chaleureux, po√©tique, valorisant, et en fran√ßais.
      N'utilise pas de balises Markdown ni de formatage HTML.

      Voici les donn√©es du th√®me natal :
      ${JSON.stringify(natalChart, null, 2)}
    `;
  }

  static async generateNatalChartInterpretation(natalChart: NatalChart, firstName?: string, userId?: string): Promise<ApiResponse<string>> {
    if (!natalChart) {
      return ApiErrorHandler.createErrorResponse('VALIDATION_ERROR', 'Les donn√©es du th√®me natal sont requises.');
    }

    try {
      const interpretation = await ApiCache.getCachedApiResponse(
        'openai-interpretation',
        { natalChart, firstName, userId },
        async () => {
          const prompt = this.buildNatalChartInterpretationPrompt(natalChart, firstName);
          return await this.callOpenAI(prompt);
        },
        7 * 24 * 60 * 60 * 1000 // Cache 7 jours
      );

      return ApiErrorHandler.createSuccessResponse(interpretation);
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de l\'interpr√©tation du th√®me natal:', error);
      return ApiErrorHandler.handleApiError(error);
    }
  }

  static async generateNatalSummary(natalChart: NatalChart, firstName: string, userId?: string): Promise<ApiResponse<string>> {
    if (!natalChart) {
      return ApiErrorHandler.createErrorResponse('VALIDATION_ERROR', 'Les donn√©es du th√®me natal sont requises.');
    }

    try {
      const summary = await ApiCache.getCachedApiResponse(
        'openai-summary',
        { natalChart, firstName, userId },
        async () => {
          const prompt = this.buildNatalSummaryPrompt(natalChart, firstName);
          return await this.callOpenAI(prompt);
        },
        7 * 24 * 60 * 60 * 1000 // Cache 7 jours
      );

      return ApiErrorHandler.createSuccessResponse(summary);
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du r√©sum√© astrologique:', error);
      return ApiErrorHandler.handleApiError(error);
    }
  }

  // M√©thodes utilitaires pour la gestion du cache et du monitoring
  static invalidateCache(pattern: string): void {
    ApiCache.invalidateApiCache(pattern);
  }

  static getServiceMetrics(): ReturnType<typeof ApiMonitor.prototype.getServiceMetrics> {
    return ApiMonitor.getInstance().getServiceMetrics('openai');
  }

  static getHealthStatus(): ReturnType<typeof ApiMonitor.prototype.getHealthStatus> {
    return ApiMonitor.getInstance().getHealthStatus('openai');
  }
}

export default OpenAIService;