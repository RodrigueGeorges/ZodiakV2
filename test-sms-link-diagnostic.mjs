#!/usr/bin/env node

import { randomUUID } from 'crypto';

// Configuration - Test via les fonctions Netlify
const NETLIFY_URL = 'https://zodiakv2.netlify.app';

// Fonction pour g√©n√©rer un code court
function generateShortCode(length = 6) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function testSmsLinkSystem() {
  console.log('üîç Diagnostic du syst√®me de liens SMS via Netlify...\n');

  try {
    // 1. Tester l'envoi d'un SMS de test
    console.log('1Ô∏è‚É£ Test d\'envoi de SMS de test...');
    const testSmsUrl = `${NETLIFY_URL}/.netlify/functions/send-test-sms`;
    
    try {
      const response = await fetch(testSmsUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ SMS de test envoy√© avec succ√®s');
        console.log('üì± R√©sultat:', result);
        
        // Extraire le short code du r√©sultat si disponible
        if (result.shortCode) {
          console.log('üîó Short code g√©n√©r√©:', result.shortCode);
          await testShortLink(result.shortCode);
        }
      } else {
        console.error('‚ùå Erreur envoi SMS de test:', result);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du test SMS:', error.message);
    }

    // 2. Tester la fonction de g√©n√©ration de guidance
    console.log('\n2Ô∏è‚É£ Test de g√©n√©ration de guidance...');
    const generateGuidanceUrl = `${NETLIFY_URL}/.netlify/functions/generate-guidance`;
    
    try {
      const response = await fetch(generateGuidanceUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ G√©n√©ration de guidance r√©ussie');
        console.log('üìä R√©sultat:', result);
      } else {
        console.error('‚ùå Erreur g√©n√©ration guidance:', result);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de guidance:', error.message);
    }

    // 3. Tester l'envoi de guidance SMS
    console.log('\n3Ô∏è‚É£ Test d\'envoi de guidance SMS...');
    const sendGuidanceUrl = `${NETLIFY_URL}/.netlify/functions/send-guidance-sms`;
    
    try {
      const response = await fetch(sendGuidanceUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Envoi de guidance SMS r√©ussi');
        console.log('üì± R√©sultat:', result);
      } else {
        console.error('‚ùå Erreur envoi guidance SMS:', result);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de guidance SMS:', error.message);
    }

    // 4. Tester l'envoi de guidance quotidienne
    console.log('\n4Ô∏è‚É£ Test d\'envoi de guidance quotidienne...');
    const dailyGuidanceUrl = `${NETLIFY_URL}/.netlify/functions/send-daily-guidance`;
    
    try {
      const response = await fetch(dailyGuidanceUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Envoi de guidance quotidienne r√©ussi');
        console.log('üìä R√©sultat:', result);
      } else {
        console.error('‚ùå Erreur envoi guidance quotidienne:', result);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de guidance quotidienne:', error.message);
    }

    // 5. Test de la page de redirection
    console.log('\n5Ô∏è‚É£ Test de la page de redirection...');
    const testShortCode = 'TEST123';
    const redirectUrl = `${NETLIFY_URL}/g/${testShortCode}`;
    
    try {
      const response = await fetch(redirectUrl, {
        method: 'GET',
        headers: {
          'Accept': 'text/html',
        },
        redirect: 'manual' // Ne pas suivre les redirections automatiquement
      });
      
      console.log('üîó URL test√©e:', redirectUrl);
      console.log('üìä Status:', response.status);
      console.log('üìä Headers:', Object.fromEntries(response.headers.entries()));
      
      if (response.status === 200) {
        console.log('‚úÖ Page de redirection accessible');
      } else if (response.status === 404) {
        console.log('‚ö†Ô∏è Page de redirection retourne 404 (normal pour un code de test)');
      } else {
        console.log('‚ö†Ô∏è Status inattendu:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du test de redirection:', error.message);
    }

    // 6. Test de la page d'acc√®s √† la guidance
    console.log('\n6Ô∏è‚É£ Test de la page d\'acc√®s √† la guidance...');
    const testToken = 'test-token-123';
    const accessUrl = `${NETLIFY_URL}/guidance/access?token=${testToken}`;
    
    try {
      const response = await fetch(accessUrl, {
        method: 'GET',
        headers: {
          'Accept': 'text/html',
        },
        redirect: 'manual'
      });
      
      console.log('üîó URL test√©e:', accessUrl);
      console.log('üìä Status:', response.status);
      
      if (response.status === 200) {
        console.log('‚úÖ Page d\'acc√®s √† la guidance accessible');
      } else if (response.status === 404) {
        console.log('‚ö†Ô∏è Page d\'acc√®s retourne 404 (normal pour un token de test)');
      } else {
        console.log('‚ö†Ô∏è Status inattendu:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du test d\'acc√®s:', error.message);
    }

    // 7. Test du syst√®me de tracking
    console.log('\n7Ô∏è‚É£ Test du syst√®me de tracking...');
    const trackingUrl = `${NETLIFY_URL}/.netlify/functions/track-sms?shortCode=TEST123&token=test-token&action=click`;
    
    try {
      const response = await fetch(trackingUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Syst√®me de tracking fonctionnel');
        console.log('üìä R√©sultat:', result);
      } else {
        console.log('‚ö†Ô∏è Erreur tracking (normal pour des donn√©es de test):', result);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du test de tracking:', error.message);
    }

    // 8. R√©sum√© final
    console.log('\nüìã R√âSUM√â DU DIAGNOSTIC');
    console.log('========================');
    console.log('‚úÖ Tests des fonctions Netlify termin√©s');
    console.log('‚úÖ Syst√®me de liens SMS test√©');
    console.log('‚úÖ Pages de redirection v√©rifi√©es');
    console.log('‚úÖ Syst√®me de tracking test√©');
    
    console.log('\nüí° PROCHAINES √âTAPES:');
    console.log('1. V√©rifiez les logs Netlify pour plus de d√©tails');
    console.log('2. Testez avec un vrai SMS envoy√©');
    console.log('3. V√©rifiez la base de donn√©es pour les tokens');
    console.log('4. Testez sur mobile si possible');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

async function testShortLink(shortCode) {
  console.log(`\nüîó Test du lien court: ${shortCode}`);
  const shortLink = `${NETLIFY_URL}/g/${shortCode}`;
  console.log('URL compl√®te:', shortLink);
  
  try {
    const response = await fetch(shortLink, {
      method: 'GET',
      headers: {
        'Accept': 'text/html',
      },
      redirect: 'manual'
    });
    
    console.log('Status:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.status === 200) {
      console.log('‚úÖ Lien court fonctionnel');
    } else {
      console.log('‚ö†Ô∏è Status inattendu:', response.status);
    }
  } catch (error) {
    console.error('‚ùå Erreur test lien court:', error.message);
  }
}

// Ex√©cuter le diagnostic
testSmsLinkSystem().then(() => {
  console.log('\nüèÅ Diagnostic termin√©');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});
