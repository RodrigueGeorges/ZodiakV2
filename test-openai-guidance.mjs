// Test script pour v√©rifier la g√©n√©ration de guidance via OpenAI
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL || 'https://your-project.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key'
);

// Mock des donn√©es de test
const mockNatalChart = {
  planets: [
    { name: 'Sun', sign: 'Leo', house: 5, longitude: 120 },
    { name: 'Moon', sign: 'Cancer', house: 4, longitude: 90 },
    { name: 'Mercury', sign: 'Virgo', house: 6, longitude: 150 },
    { name: 'Venus', sign: 'Libra', house: 7, longitude: 180 },
    { name: 'Mars', sign: 'Scorpio', house: 8, longitude: 210 }
  ],
  houses: [
    { number: 1, sign: 'Aries', degree: 0 },
    { number: 2, sign: 'Taurus', degree: 30 },
    { number: 3, sign: 'Gemini', degree: 60 }
  ],
  ascendant: { sign: 'Aries', degree: 0 }
};

const mockTransits = {
  sun: { sign: 'Capricorn', degree: 15, house: 10, retrograde: false },
  moon: { sign: 'Pisces', degree: 25, house: 12, retrograde: false },
  mercury: { sign: 'Capricorn', degree: 8, house: 10, retrograde: true },
  venus: { sign: 'Sagittarius', degree: 20, house: 9, retrograde: false },
  mars: { sign: 'Aquarius', degree: 5, house: 11, retrograde: false }
};

async function testOpenAIGuidance() {
  console.log('üß™ Test de g√©n√©ration de guidance via OpenAI...');
  
  try {
    // 1. V√©rifier la configuration OpenAI
    const openaiKey = process.env.OPENAI_API_KEY;
    if (!openaiKey) {
      console.log('‚ùå OPENAI_API_KEY non configur√©e');
      return;
    }
    console.log('‚úÖ Cl√© OpenAI configur√©e');
    
    // 2. Test direct de l'API OpenAI
    console.log('üîÑ Test de l\'API OpenAI...');
    const prompt = `
Tu es un astrologue expert, cr√©atif, inspirant et moderne, qui r√©dige des guidances quotidiennes pour une application de guidance astrologique personnalis√©e.

Ta mission :
- G√©n√®re une guidance du jour profonde, nuanc√©e, innovante et personnalis√©e, bas√©e sur le th√®me natal (fourni) et les transits plan√©taires du jour (fournis).
- Utilise un ton riche, imag√©, parfois po√©tique ou philosophique, sans jargon technique inaccessible.
- N'h√©site pas √† utiliser des m√©taphores, des r√©f√©rences √† la mythologie, √† la litt√©rature, ou √† la culture populaire pour illustrer tes conseils.
- Propose des conseils concrets, mais aussi des r√©flexions ou des inspirations qui invitent √† la prise de recul.
- Structure la r√©ponse en 4 parties :
  1. R√©sum√© g√©n√©ral (2-3 phrases, synth√©tique, engageant, mais profond)
  2. Amour : conseil nuanc√©, imag√©, parfois symbolique, avec un score sur 100
  3. Travail : conseil pratique, mais aussi visionnaire ou inspirant, avec un score sur 100
  4. Bien-√™tre/√ânergie : conseil pour l'√©quilibre personnel, ouvert √† la spiritualit√©, la nature, la cr√©ativit√©, avec un score sur 100
- Termine par un mantra du jour ou une inspiration courte, originale, qui peut √™tre une citation, un proverbe, ou une cr√©ation de ton cru.
- Sois cr√©atif, pertinent, et √©vite toute r√©p√©tition ou banalit√©.
- Varie le style chaque jour (parfois po√©tique, parfois philosophique, parfois humoristique, parfois myst√©rieux).

Format de r√©ponse JSON attendu :
{
  "summary": "R√©sum√© g√©n√©ral du jour, profond et engageant.",
  "love": { "text": "Conseil amour nuanc√© et imag√©.", "score": 0-100 },
  "work": { "text": "Conseil travail inspirant et concret.", "score": 0-100 },
  "energy": { "text": "Conseil bien-√™tre original et subtil.", "score": 0-100 },
  "mantra": "Mantra, citation ou inspiration du jour."
}

Donn√©es √† utiliser :
- Th√®me natal : ${JSON.stringify(mockNatalChart, null, 2)}
- Transits du jour : ${JSON.stringify(mockTransits, null, 2)}

Exemple de ton attendu :
- "Aujourd'hui, une brise nouvelle souffle sur ton destin, t'invitant √† explorer des terres int√©rieures inexplor√©es."
- "C√¥t√© amour, laisse parler ton c≈ìur comme un po√®te sous la lune..."
- "Au travail, ose r√™ver grand, car les √©toiles favorisent les audacieux..."
- "Ton √©nergie est une rivi√®re : parfois paisible, parfois imp√©tueuse, mais toujours vivante."
- "Mantra : 'Comme le ph√©nix, je me r√©g√©n√®re √† chaque aube.'"

G√©n√®re la guidance du jour selon ce format et ce ton.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: [
          { role: 'system', content: 'Tu es un astrologue expert.' }, 
          { role: 'user', content: prompt }
        ],
        max_tokens: 400,
        temperature: 0.7,
        response_format: { type: 'json_object' },
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur OpenAI (${response.status}):`, errorText);
      return;
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse OpenAI re√ßue');
    
    // 3. Parser et valider la r√©ponse
    let guidance;
    try {
      guidance = JSON.parse(data.choices[0].message.content);
      console.log('‚úÖ R√©ponse JSON pars√©e avec succ√®s');
    } catch (parseError) {
      console.log('‚ùå Erreur de parsing JSON:', parseError.message);
      console.log('R√©ponse brute:', data.choices[0].message.content);
      return;
    }

    // 4. Valider la structure de la guidance
    console.log('üîç Validation de la structure de la guidance...');
    
    const requiredFields = ['summary', 'love', 'work', 'energy', 'mantra'];
    const missingFields = requiredFields.filter(field => !guidance[field]);
    
    if (missingFields.length > 0) {
      console.log(`‚ùå Champs manquants: ${missingFields.join(', ')}`);
      console.log('Structure re√ßue:', Object.keys(guidance));
    } else {
      console.log('‚úÖ Tous les champs requis sont pr√©sents');
    }

    // 5. Valider les scores
    const scoreFields = ['love', 'work', 'energy'];
    const invalidScores = scoreFields.filter(field => {
      const fieldData = guidance[field];
      return !fieldData || typeof fieldData !== 'object' || 
             !fieldData.text || !fieldData.score || 
             typeof fieldData.score !== 'number' || 
             fieldData.score < 0 || fieldData.score > 100;
    });

    if (invalidScores.length > 0) {
      console.log(`‚ùå Scores invalides pour: ${invalidScores.join(', ')}`);
    } else {
      console.log('‚úÖ Tous les scores sont valides');
    }

    // 6. Afficher la guidance g√©n√©r√©e
    console.log('\nüìù Guidance g√©n√©r√©e:');
    console.log('‚îÄ'.repeat(50));
    console.log(`R√©sum√©: ${guidance.summary}`);
    console.log(`Amour: ${guidance.love?.text} (Score: ${guidance.love?.score})`);
    console.log(`Travail: ${guidance.work?.text} (Score: ${guidance.work?.score})`);
    console.log(`√ânergie: ${guidance.energy?.text} (Score: ${guidance.energy?.score})`);
    console.log(`Mantra: ${guidance.mantra}`);
    console.log('‚îÄ'.repeat(50));

    // 7. Test de sauvegarde en cache
    console.log('\nüíæ Test de sauvegarde en cache...');
    try {
      const cacheKey = `test_guidance_${Date.now()}`;
      const { error: cacheError } = await supabase
        .from('guidance_cache')
        .upsert({
          cache_key: cacheKey,
          guidance_data: guidance,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (cacheError) {
        console.log('‚ùå Erreur lors de la sauvegarde en cache:', cacheError.message);
      } else {
        console.log('‚úÖ Guidance sauvegard√©e en cache avec succ√®s');
      }
    } catch (cacheError) {
      console.log('‚ùå Erreur lors du test de cache:', cacheError.message);
    }

    // 8. Test de r√©cup√©ration depuis le cache
    console.log('\nüîç Test de r√©cup√©ration depuis le cache...');
    try {
      const { data: cachedGuidance, error: retrieveError } = await supabase
        .from('guidance_cache')
        .select('guidance_data')
        .eq('cache_key', cacheKey)
        .maybeSingle();

      if (retrieveError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration du cache:', retrieveError.message);
      } else if (cachedGuidance) {
        console.log('‚úÖ Guidance r√©cup√©r√©e depuis le cache avec succ√®s');
      } else {
        console.log('‚ùå Guidance non trouv√©e dans le cache');
      }
    } catch (retrieveError) {
      console.log('‚ùå Erreur lors du test de r√©cup√©ration:', retrieveError.message);
    }

  } catch (error) {
    console.log('‚ùå Erreur g√©n√©rale lors du test:', error.message);
  }
}

// Ex√©cuter le test
testOpenAIGuidance(); 